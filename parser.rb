#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.9
# from Racc grammer file "".
#

require 'racc/parser.rb'

module Boston
  class Root < Struct.new(:statement)
    def visit g
      statement.visit(g)
    end
  end

  class BinaryOperator < Struct.new(:operator, :left, :right)
    def visit g
      left.visit g
      right.visit g
      if operator == "+"
        g.add
      elsif operator == "-"
        g.sub
      end
    end
  end

  class Term < Struct.new(:value)
    def visit g
      g.push value
    end
  end
end

module Boston
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 36)

def parse tokens
  @tokens = tokens.dup
  do_parse
end

def next_token
  @tokens.shift
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     4,     5,     6,     7,     4 ]

racc_action_check = [
     0,     1,     2,     5,     6 ]

racc_action_pointer = [
    -3,     1,     0,   nil,   nil,     3,     1,   nil,   nil ]

racc_action_default = [
    -5,    -5,    -1,    -3,    -4,    -5,    -5,     9,    -2 ]

racc_goto_table = [
     3,     2,     1,   nil,   nil,   nil,     8 ]

racc_goto_check = [
     3,     2,     1,   nil,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     2,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 5, :_reduce_1,
  3, 6, :_reduce_2,
  1, 6, :_reduce_none,
  1, 7, :_reduce_4 ]

racc_reduce_n = 5

racc_shift_n = 9

racc_token_table = {
  false => 0,
  :error => 1,
  :OPERATOR => 2,
  :NUMBER => 3 }

racc_nt_base = 4

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "OPERATOR",
  "NUMBER",
  "$start",
  "program",
  "statement",
  "term" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 2)
  def _reduce_1(val, _values, result)
     result = Root.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 3)
  def _reduce_2(val, _values, result)
     result = BinaryOperator.new(val[1], val[0], val[2]) 
    result
  end
.,.,

# reduce 3 omitted

module_eval(<<'.,.,', 'parser.y', 5)
  def _reduce_4(val, _values, result)
     result = Term.new(val[0].to_i) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module Boston
